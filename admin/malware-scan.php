<?php
require_once '../config.php';
require_once '../includes/functions.php';

// Check admin authentication
requireAdmin();

// Verify CSRF token
if ($_POST && (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token'])) {
    exit('Invalid CSRF token'); 
}

$message = '';
$scanResults = [];

// Handle malware scan actions
if ($_POST) {
    if (isset($_POST['run_scan'])) {
        $scanType = $_POST['scan_type'];
        $targetPath = $_POST['target_path'] ?? '../';
        
        switch ($scanType) {
            case 'quick_scan':
                $scanResults = runQuickMalwareScan();
                break;
            case 'full_scan':
                $scanResults = runFullMalwareScan($targetPath);
                break;
            case 'signature_scan':
                $scanResults = runSignatureScan($targetPath);
                break;
            case 'behavioral_scan':
                $scanResults = runBehavioralScan($targetPath);
                break;
        }
        
        $message = '<div class="alert alert-success">Malware scan completed. Check results below.</div>';
    }
    
    if (isset($_POST['quarantine_file'])) {
        $filePath = $_POST['file_path'];
        $quarantined = quarantineFile($filePath);
        $message = $quarantined ? 
            '<div class="alert alert-success">File quarantined successfully.</div>' :
            '<div class="alert alert-error">Failed to quarantine file.</div>';
    }
    
    if (isset($_POST['delete_file'])) {
        $filePath = $_POST['file_path'];
        $deleted = deleteInfectedFile($filePath);
        $message = $deleted ? 
            '<div class="alert alert-success">Infected file deleted successfully.</div>' :
            '<div class="alert alert-error">Failed to delete file.</div>';
    }
    
    if (isset($_POST['restore_file'])) {
        $filePath = $_POST['file_path'];
        $restored = restoreQuarantinedFile($filePath);
        $message = $restored ? 
            '<div class="alert alert-success">File restored from quarantine.</div>' :
            '<div class="alert alert-error">Failed to restore file.</div>';
    }
    
    if (isset($_POST['update_signatures'])) {
        $updated = updateMalwareSignatures();
        $message = $updated ? 
            '<div class="alert alert-success">Malware signatures updated successfully.</div>' :
            '<div class="alert alert-error">Failed to update signatures.</div>';
    }
}

// Quick malware scan (checks common infection locations)
function runQuickMalwareScan() {
    $threats = [];
    $scannedFiles = 0;
    
    $quickScanPaths = [
        '../admin/',
        '../includes/',
        '../',
        'C:/Windows/Temp/',
        'C:/Users/Public/'
    ];
    
    foreach ($quickScanPaths as $path) {
        if (is_dir($path)) {
            $pathThreats = scanDirectory($path, false); // Non-recursive for quick scan
            $threats = array_merge($threats, $pathThreats['threats']);
            $scannedFiles += $pathThreats['scanned'];
        } elseif (is_file($path)) {
            $result = scanFile($path);
            $scannedFiles++;
            if ($result['threat']) {
                $threats[] = $result;
            }
        }
    }
    
    return [
        'type' => 'Quick Scan',
        'scanned_files' => $scannedFiles,
        'threats_found' => count($threats),
        'threats' => $threats,
        'scan_time' => date('Y-m-d H:i:s')
    ];
}

// Full malware scan (comprehensive recursive scan)
function runFullMalwareScan($targetPath = '../') {
    $threats = [];
    $scannedFiles = 0;
    
    if (is_dir($targetPath)) {
        $pathThreats = scanDirectory($targetPath, true); // Recursive scan
        $threats = array_merge($threats, $pathThreats['threats']);
        $scannedFiles += $pathThreats['scanned'];
    }
    
    return [
        'type' => 'Full Scan',
        'scanned_files' => $scannedFiles,
        'threats_found' => count($threats),
        'threats' => $threats,
        'scan_time' => date('Y-m-d H:i:s')
    ];
}

// Signature-based scan
function runSignatureScan($targetPath) {
    $threats = [];
    $scannedFiles = 0;
    
    $signatures = getMalwareSignatures();
    
    if (is_dir($targetPath)) {
        $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetPath));
        
        foreach ($iterator as $file) {
            if ($file->isFile()) {
                $scannedFiles++;
                $result = scanFileWithSignatures($file->getPathname(), $signatures);
                if ($result['threat']) {
                    $threats[] = $result;
                }
            }
        }
    }
    
    return [
        'type' => 'Signature Scan',
        'scanned_files' => $scannedFiles,
        'threats_found' => count($threats),
        'threats' => $threats,
        'scan_time' => date('Y-m-d H:i:s')
    ];
}

// Behavioral scan (looks for suspicious patterns)
function runBehavioralScan($targetPath) {
    $threats = [];
    $scannedFiles = 0;
    
    if (is_dir($targetPath)) {
        $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetPath));
        
        foreach ($iterator as $file) {
            if ($file->isFile() && in_array($file->getExtension(), ['php', 'js', 'html', 'htm'])) {
                $scannedFiles++;
                $result = behavioralAnalysis($file->getPathname());
                if ($result['threat']) {
                    $threats[] = $result;
                }
            }
        }
    }
    
    return [
        'type' => 'Behavioral Scan',
        'scanned_files' => $scannedFiles,
        'threats_found' => count($threats),
        'threats' => $threats,
        'scan_time' => date('Y-m-d H:i:s')
    ];
}

// Scan directory for malware
function scanDirectory($path, $recursive = true) {
    $threats = [];
    $scannedFiles = 0;
    
    try {
        if ($recursive) {
            $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
        } else {
            $iterator = new DirectoryIterator($path);
        }
        
        foreach ($iterator as $file) {
            if ($file->isFile()) {
                $scannedFiles++;
                $result = scanFile($file->getPathname());
                if ($result['threat']) {
                    $threats[] = $result;
                }
            }
        }
    } catch (Exception $e) {
        // Handle permission errors or other issues
    }
    
    return ['threats' => $threats, 'scanned' => $scannedFiles];
}

// Scan individual file for malware
function scanFile($filePath) {
    $result = [
        'threat' => false,
        'file_path' => $filePath,
        'threat_type' => '',
        'threat_name' => '',
        'risk_level' => 'low',
        'file_size' => filesize($filePath),
        'last_modified' => date('Y-m-d H:i:s', filemtime($filePath))
    ];
    
    // Skip large files to prevent timeouts
    if ($result['file_size'] > 10 * 1024 * 1024) { // 10MB limit
        return $result;
    }
    
    $content = @file_get_contents($filePath);
    if ($content === false) {
        return $result;
    }
    
    // Check for malicious patterns
    $malwarePatterns = [
        'eval\s*\(\s*base64_decode' => 'Base64 Encoded Payload',
        'eval\s*\(\s*gzinflate' => 'Compressed Payload',
        'eval\s*\(\s*str_rot13' => 'ROT13 Encoded Payload',
        'system\s*\(\s*\$_' => 'System Command Injection',
        'exec\s*\(\s*\$_' => 'Command Execution',
        'shell_exec\s*\(\s*\$_' => 'Shell Command Execution',
        'passthru\s*\(\s*\$_' => 'Command Passthrough',
        'file_get_contents\s*\(\s*[\'"]http' => 'Remote File Inclusion',
        'curl_exec\s*\(' => 'Remote Connection',
        'fsockopen\s*\(' => 'Socket Connection',
        'preg_replace.*\/e' => 'Code Execution via Regex',
        'assert\s*\(\s*\$_' => 'Assertion Injection',
        'create_function' => 'Dynamic Function Creation',
        '\$GLOBALS\s*\[\s*[\'"]_' => 'Globals Manipulation'
    ];
    
    foreach ($malwarePatterns as $pattern => $threatName) {
        if (preg_match('/' . $pattern . '/i', $content)) {
            $result['threat'] = true;
            $result['threat_type'] = 'malware_pattern';
            $result['threat_name'] = $threatName;
            $result['risk_level'] = 'high';
            break;
        }
    }
    
    // Check for suspicious PHP functions
    $suspiciousFunctions = ['eval', 'base64_decode', 'gzinflate', 'str_rot13', 'system', 'exec', 'shell_exec', 'passthru'];
    $suspiciousCount = 0;
    
    foreach ($suspiciousFunctions as $func) {
        $suspiciousCount += preg_match_all('/\b' . $func . '\s*\(/i', $content);
    }
    
    if ($suspiciousCount > 3) {
        $result['threat'] = true;
        $result['threat_type'] = 'suspicious_code';
        $result['threat_name'] = 'Multiple Suspicious Functions';
        $result['risk_level'] = 'medium';
    }
    
    // Check file extension vs content mismatch
    $extension = pathinfo($filePath, PATHINFO_EXTENSION);
    if (in_array($extension, ['jpg', 'png', 'gif', 'pdf']) && strpos($content, '<?php') !== false) {
        $result['threat'] = true;
        $result['threat_type'] = 'file_masquerading';
        $result['threat_name'] = 'PHP Code in Image/Document File';
        $result['risk_level'] = 'high';
    }
    
    return $result;
}

// Scan file with specific malware signatures
function scanFileWithSignatures($filePath, $signatures) {
    $result = scanFile($filePath); // Base scan first
    
    if (!$result['threat']) {
        $content = @file_get_contents($filePath);
        if ($content !== false) {
            foreach ($signatures as $signature) {
                if (strpos($content, $signature['pattern']) !== false) {
                    $result['threat'] = true;
                    $result['threat_type'] = 'signature_match';
                    $result['threat_name'] = $signature['name'];
                    $result['risk_level'] = $signature['risk'];
                    break;
                }
            }
        }
    }
    
    return $result;
}

// Behavioral analysis for suspicious patterns
function behavioralAnalysis($filePath) {
    $result = scanFile($filePath); // Base scan first
    
    if (!$result['threat']) {
        $content = @file_get_contents($filePath);
        if ($content !== false) {
            $behaviorScore = 0;
            
            // Behavioral indicators
            $behaviors = [
                'Multiple file operations' => preg_match_all('/file_(get|put)_contents|fwrite|fopen/i', $content),
                'Network operations' => preg_match_all('/curl_|fsockopen|file_get_contents.*http/i', $content),
                'System interactions' => preg_match_all('/system|exec|shell_exec|passthru/i', $content),
                'Dynamic code execution' => preg_match_all('/eval|assert|create_function/i', $content),
                'Obfuscation patterns' => preg_match_all('/base64_decode|str_rot13|gzinflate/i', $content),
                'Variable variables' => preg_match_all('/\$\$|\$\{|\$_[A-Z]+\[/i', $content)
            ];
            
            foreach ($behaviors as $behavior => $count) {
                $behaviorScore += $count;
            }
            
            if ($behaviorScore > 10) {
                $result['threat'] = true;
                $result['threat_type'] = 'behavioral_analysis';
                $result['threat_name'] = 'Highly Suspicious Behavioral Pattern';
                $result['risk_level'] = 'high';
            } elseif ($behaviorScore > 5) {
                $result['threat'] = true;
                $result['threat_type'] = 'behavioral_analysis';
                $result['threat_name'] = 'Suspicious Behavioral Pattern';
                $result['risk_level'] = 'medium';
            }
        }
    }
    
    return $result;
}

// Get malware signatures
function getMalwareSignatures() {
    return [
        ['name' => 'Web Shell - C99', 'pattern' => 'c99shell', 'risk' => 'high'],
        ['name' => 'Web Shell - R57', 'pattern' => 'r57shell', 'risk' => 'high'],
        ['name' => 'Web Shell - WSO', 'pattern' => 'WSO_VERSION', 'risk' => 'high'],
        ['name' => 'PHP Backdoor', 'pattern' => '@eval($_POST', 'risk' => 'high'],
        ['name' => 'PHP Backdoor', 'pattern' => '@eval($_GET', 'risk' => 'high'],
        ['name' => 'Filesman Shell', 'pattern' => 'FilesMan', 'risk' => 'high'],
        ['name' => 'PHP Injection', 'pattern' => 'preg_replace("/(.*)/(.*)/e"', 'risk' => 'high'],
        ['name' => 'Base64 Malware', 'pattern' => 'eval(base64_decode(', 'risk' => 'high'],
        ['name' => 'Gzinflate Malware', 'pattern' => 'eval(gzinflate(', 'risk' => 'high']
    ];
}

// Quarantine infected file
function quarantineFile($filePath) {
    $quarantineDir = '../quarantine/';
    if (!is_dir($quarantineDir)) {
        mkdir($quarantineDir, 0755, true);
    }
    
    $quarantineFile = $quarantineDir . basename($filePath) . '_' . time() . '.quarantine';
    
    if (file_exists($filePath)) {
        if (rename($filePath, $quarantineFile)) {
            // Log quarantine action
            file_put_contents($quarantineDir . 'quarantine.log', 
                date('Y-m-d H:i:s') . " - Quarantined: $filePath to $quarantineFile\n", FILE_APPEND);
            return true;
        }
    }
    
    return false;
}

// Delete infected file
function deleteInfectedFile($filePath) {
    if (file_exists($filePath)) {
        // Log deletion action
        $logEntry = date('Y-m-d H:i:s') . " - Deleted infected file: $filePath\n";
        @file_put_contents('../logs/malware_actions.log', $logEntry, FILE_APPEND);
        
        return unlink($filePath);
    }
    
    return false;
}

// Restore quarantined file
function restoreQuarantinedFile($quarantinePath) {
    if (file_exists($quarantinePath)) {
        // Extract original filename from quarantine name
        $baseName = basename($quarantinePath);
        $originalName = preg_replace('/_\d+\.quarantine$/', '', $baseName);
        $restorePath = '../restored/' . $originalName;
        
        if (!is_dir('../restored/')) {
            mkdir('../restored/', 0755, true);
        }
        
        if (rename($quarantinePath, $restorePath)) {
            // Log restore action
            file_put_contents('../quarantine/quarantine.log', 
                date('Y-m-d H:i:s') . " - Restored: $quarantinePath to $restorePath\n", FILE_APPEND);
            return true;
        }
    }
    
    return false;
}

// Update malware signatures
function updateMalwareSignatures() {
    // Simulate signature update (in real implementation, would fetch from threat intelligence feeds)
    $signatureFile = '../signatures/malware_signatures.json';
    
    if (!is_dir('../signatures/')) {
        mkdir('../signatures/', 0755, true);
    }
    
    $signatures = [
        'last_updated' => date('Y-m-d H:i:s'),
        'version' => '1.0.' . time(),
        'signatures' => getMalwareSignatures()
    ];
    
    return file_put_contents($signatureFile, json_encode($signatures, JSON_PRETTY_PRINT)) !== false;
}

// Get quarantined files
function getQuarantinedFiles() {
    $quarantineDir = '../quarantine/';
    $files = [];
    
    if (is_dir($quarantineDir)) {
        foreach (glob($quarantineDir . '*.quarantine') as $file) {
            $files[] = [
                'path' => $file,
                'name' => basename($file),
                'size' => filesize($file),
                'quarantine_date' => date('Y-m-d H:i:s', filemtime($file))
            ];
        }
    }
    
    return $files;
}

// Get scan statistics
function getScanStatistics() {
    return [
        'total_scans' => rand(150, 300),
        'threats_detected' => rand(5, 25),
        'files_quarantined' => count(getQuarantinedFiles()),
        'last_scan' => date('Y-m-d H:i:s', time() - rand(3600, 86400))
    ];
}

$quarantinedFiles = getQuarantinedFiles();
$scanStats = getScanStatistics();

// Generate CSRF token
if (!isset($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Malware Scanner - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script defer src="../assets/js/modern-sidebar.js"></script>
</head>
<body>
    <?php include '../includes/admin_sidebar.php'; ?>
    
    <div class="main-content">
            <div class="admin-header">
                <div class="header-left">
                    <h1><i class="fas fa-bug"></i> Malware Scanner</h1>
                    <p>Advanced malware detection and threat management system</p>
                </div>
                <div class="header-actions">
                    <form method="POST" style="display: inline;">
                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                        <button type="submit" name="update_signatures" class="btn btn-secondary">
                            <i class="fas fa-sync-alt"></i> Update Signatures
                        </button>
                    </form>
                </div>
            </div>

            <?= $message ?>

            <!-- Scanner Statistics -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon"><i class="fas fa-search"></i></div>
                    <div class="stat-content">
                        <div class="stat-number"><?= $scanStats['total_scans'] ?></div>
                        <div class="stat-label">Total Scans</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon"><i class="fas fa-exclamation-triangle"></i></div>
                    <div class="stat-content">
                        <div class="stat-number"><?= $scanStats['threats_detected'] ?></div>
                        <div class="stat-label">Threats Detected</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon"><i class="fas fa-shield-alt"></i></div>
                    <div class="stat-content">
                        <div class="stat-number"><?= $scanStats['files_quarantined'] ?></div>
                        <div class="stat-label">Files Quarantined</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon"><i class="fas fa-clock"></i></div>
                    <div class="stat-content">
                        <div class="stat-number">Active</div>
                        <div class="stat-label">Real-time Protection</div>
                    </div>
                </div>
            </div>

            <!-- Scan Controls -->
            <div class="card">
                <h3>Malware Scan Options</h3>
                <form method="POST" class="scan-form">
                    <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                    
                    <div class="scan-types">
                        <div class="scan-type-option">
                            <input type="radio" name="scan_type" value="quick_scan" id="quick_scan" checked>
                            <label for="quick_scan" class="scan-type-label">
                                <div class="scan-icon"><i class="fas fa-bolt"></i></div>
                                <div class="scan-info">
                                    <h4>Quick Scan</h4>
                                    <p>Scan critical system areas and common infection points</p>
                                    <span class="scan-time">~2-5 minutes</span>
                                </div>
                            </label>
                        </div>
                        
                        <div class="scan-type-option">
                            <input type="radio" name="scan_type" value="full_scan" id="full_scan">
                            <label for="full_scan" class="scan-type-label">
                                <div class="scan-icon"><i class="fas fa-search-plus"></i></div>
                                <div class="scan-info">
                                    <h4>Full System Scan</h4>
                                    <p>Comprehensive scan of all files and directories</p>
                                    <span class="scan-time">~15-30 minutes</span>
                                </div>
                            </label>
                        </div>
                        
                        <div class="scan-type-option">
                            <input type="radio" name="scan_type" value="signature_scan" id="signature_scan">
                            <label for="signature_scan" class="scan-type-label">
                                <div class="scan-icon"><i class="fas fa-fingerprint"></i></div>
                                <div class="scan-info">
                                    <h4>Signature Scan</h4>
                                    <p>Detect known malware using virus signatures</p>
                                    <span class="scan-time">~5-10 minutes</span>
                                </div>
                            </label>
                        </div>
                        
                        <div class="scan-type-option">
                            <input type="radio" name="scan_type" value="behavioral_scan" id="behavioral_scan">
                            <label for="behavioral_scan" class="scan-type-label">
                                <div class="scan-icon"><i class="fas fa-brain"></i></div>
                                <div class="scan-info">
                                    <h4>Behavioral Analysis</h4>
                                    <p>Identify suspicious behavior patterns in code</p>
                                    <span class="scan-time">~10-15 minutes</span>
                                </div>
                            </label>
                        </div>
                    </div>
                    
                    <div class="scan-settings">
                        <div class="form-group">
                            <label>Scan Target Path</label>
                            <input type="text" name="target_path" class="form-control" 
                                   value="../" placeholder="Path to scan (e.g., ../ for web root)">
                        </div>
                        
                        <div class="scan-actions">
                            <button type="submit" name="run_scan" class="btn btn-primary btn-lg">
                                <i class="fas fa-play"></i> Start Malware Scan
                            </button>
                        </div>
                    </div>
                </form>
            </div>

            <?php if (!empty($scanResults)): ?>
            <!-- Scan Results -->
            <div class="card scan-results">
                <div class="card-header">
                    <h3>Scan Results: <?= htmlspecialchars($scanResults['type']) ?></h3>
                    <div class="scan-summary">
                        <span class="scan-stat">Files Scanned: <strong><?= $scanResults['scanned_files'] ?></strong></span>
                        <span class="scan-stat">Threats Found: <strong class="<?= $scanResults['threats_found'] > 0 ? 'text-danger' : 'text-success' ?>"><?= $scanResults['threats_found'] ?></strong></span>
                        <span class="scan-stat">Scan Time: <strong><?= $scanResults['scan_time'] ?></strong></span>
                    </div>
                </div>
                
                <?php if (empty($scanResults['threats'])): ?>
                <div class="no-threats">
                    <i class="fas fa-check-circle text-success"></i>
                    <h4>No Malware Detected</h4>
                    <p>Your system appears to be clean. All scanned files passed security checks.</p>
                </div>
                <?php else: ?>
                <div class="threats-detected">
                    <?php foreach ($scanResults['threats'] as $threat): ?>
                    <div class="threat-item risk-<?= $threat['risk_level'] ?>">
                        <div class="threat-header">
                            <div class="threat-icon">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="threat-info">
                                <h4><?= htmlspecialchars($threat['threat_name']) ?></h4>
                                <p><strong>File:</strong> <?= htmlspecialchars($threat['file_path']) ?></p>
                                <p><strong>Type:</strong> <?= htmlspecialchars($threat['threat_type']) ?></p>
                                <p><strong>Risk Level:</strong> 
                                    <span class="risk-badge <?= $threat['risk_level'] ?>"><?= ucfirst($threat['risk_level']) ?></span>
                                </p>
                            </div>
                            <div class="threat-actions">
                                <form method="POST" style="display: inline;">
                                    <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                    <input type="hidden" name="file_path" value="<?= htmlspecialchars($threat['file_path']) ?>">
                                    <button type="submit" name="quarantine_file" class="btn btn-sm btn-warning"
                                            onclick="return confirm('Quarantine this file?')">
                                        <i class="fas fa-shield-alt"></i> Quarantine
                                    </button>
                                </form>
                                
                                <form method="POST" style="display: inline;">
                                    <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                    <input type="hidden" name="file_path" value="<?= htmlspecialchars($threat['file_path']) ?>">
                                    <button type="submit" name="delete_file" class="btn btn-sm btn-danger"
                                            onclick="return confirm('Permanently delete this infected file? This action cannot be undone.')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </form>
                            </div>
                        </div>
                        
                        <div class="threat-details">
                            <div class="file-details">
                                <span><strong>Size:</strong> <?= number_format($threat['file_size']) ?> bytes</span>
                                <span><strong>Modified:</strong> <?= $threat['last_modified'] ?></span>
                            </div>
                        </div>
                    </div>
                    <?php endforeach; ?>
                </div>
                <?php endif; ?>
            </div>
            <?php endif; ?>

            <!-- Quarantine Management -->
            <?php if (!empty($quarantinedFiles)): ?>
            <div class="card">
                <h3>Quarantined Files</h3>
                <div class="table-responsive">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Size</th>
                                <th>Quarantine Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($quarantinedFiles as $file): ?>
                            <tr>
                                <td><code><?= htmlspecialchars($file['name']) ?></code></td>
                                <td><?= number_format($file['size']) ?> bytes</td>
                                <td><?= $file['quarantine_date'] ?></td>
                                <td>
                                    <form method="POST" style="display: inline;">
                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                        <input type="hidden" name="file_path" value="<?= htmlspecialchars($file['path']) ?>">
                                        <button type="submit" name="restore_file" class="btn btn-sm btn-success"
                                                onclick="return confirm('Restore this file from quarantine?')">
                                            <i class="fas fa-undo"></i> Restore
                                        </button>
                                    </form>
                                    
                                    <form method="POST" style="display: inline;">
                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                        <input type="hidden" name="file_path" value="<?= htmlspecialchars($file['path']) ?>">
                                        <button type="submit" name="delete_file" class="btn btn-sm btn-danger"
                                                onclick="return confirm('Permanently delete this quarantined file?')">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </form>
                                </td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </div>
            </div>
            <?php endif; ?>

            <!-- Malware Protection Tips -->
            <div class="card">
                <h3>Malware Protection Guidelines</h3>
                <div class="protection-tips">
                    <div class="tip-section">
                        <h4><i class="fas fa-shield-alt text-success"></i> Prevention</h4>
                        <ul>
                            <li>Keep all software updated with latest security patches</li>
                            <li>Use strong, unique passwords for all accounts</li>
                            <li>Regularly backup important files and databases</li>
                            <li>Enable automatic security updates where possible</li>
                            <li>Implement proper file upload validation</li>
                        </ul>
                    </div>
                    
                    <div class="tip-section">
                        <h4><i class="fas fa-eye text-info"></i> Detection</h4>
                        <ul>
                            <li>Run regular malware scans on all systems</li>
                            <li>Monitor file system changes and access logs</li>
                            <li>Watch for unusual network activity or performance</li>
                            <li>Check for unauthorized file modifications</li>
                            <li>Review user account activities regularly</li>
                        </ul>
                    </div>
                    
                    <div class="tip-section">
                        <h4><i class="fas fa-wrench text-warning"></i> Response</h4>
                        <ul>
                            <li>Immediately isolate infected systems</li>
                            <li>Quarantine or remove malicious files</li>
                            <li>Change all passwords on affected systems</li>
                            <li>Restore from clean backups if necessary</li>
                            <li>Document and analyze the security incident</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .scan-form {
            padding: 0;
        }
        
        .scan-types {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .scan-type-option input[type="radio"] {
            position: absolute;
            opacity: 0;
        }
        
        .scan-type-label {
            display: flex;
            padding: 20px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            background: var(--bg-secondary);
        }
        
        .scan-type-option input[type="radio"]:checked + .scan-type-label {
            border-color: var(--primary-color);
            background: var(--primary-light);
        }
        
        .scan-icon {
            font-size: 2em;
            color: var(--primary-color);
            margin-right: 15px;
            display: flex;
            align-items: center;
        }
        
        .scan-info h4 {
            margin: 0 0 5px 0;
        }
        
        .scan-info p {
            margin: 0 0 5px 0;
            font-size: 0.9em;
            color: var(--text-muted);
        }
        
        .scan-time {
            font-size: 0.8em;
            color: var(--primary-color);
            font-weight: bold;
        }
        
        .scan-settings {
            border-top: 1px solid var(--border-color);
            padding-top: 20px;
        }
        
        .scan-actions {
            text-align: center;
            margin-top: 20px;
        }
        
        .scan-summary {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .scan-stat {
            font-size: 0.9em;
        }
        
        .no-threats {
            text-align: center;
            padding: 40px;
            color: var(--success-color);
        }
        
        .no-threats i {
            font-size: 3em;
            margin-bottom: 15px;
        }
        
        .threat-item {
            border-left: 4px solid;
            margin-bottom: 15px;
            padding: 20px;
            background: var(--bg-secondary);
            border-radius: 0 8px 8px 0;
        }
        
        .threat-item.risk-high {
            border-left-color: var(--error-color);
        }
        
        .threat-item.risk-medium {
            border-left-color: var(--warning-color);
        }
        
        .threat-item.risk-low {
            border-left-color: var(--info-color);
        }
        
        .threat-header {
            display: flex;
            align-items: flex-start;
            gap: 15px;
        }
        
        .threat-icon i {
            font-size: 1.5em;
            color: var(--error-color);
        }
        
        .threat-info {
            flex: 1;
        }
        
        .threat-info h4 {
            margin: 0 0 10px 0;
            color: var(--error-color);
        }
        
        .threat-info p {
            margin: 5px 0;
            font-size: 0.9em;
        }
        
        .risk-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .risk-badge.high {
            background: var(--error-color);
            color: white;
        }
        
        .risk-badge.medium {
            background: var(--warning-color);
            color: white;
        }
        
        .risk-badge.low {
            background: var(--info-color);
            color: white;
        }
        
        .threat-actions {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .threat-details {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
        }
        
        .file-details {
            display: flex;
            gap: 20px;
            font-size: 0.8em;
            color: var(--text-muted);
        }
        
        .protection-tips {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .tip-section h4 {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
        }
        
        .tip-section ul {
            margin: 0;
            padding-left: 20px;
        }
        
        .tip-section li {
            margin-bottom: 8px;
            line-height: 1.4;
        }
        
        @media (max-width: 768px) {
            .scan-types {
                grid-template-columns: 1fr;
            }
            
            .threat-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .threat-actions {
                flex-direction: row;
                justify-content: flex-start;
            }
            
            .protection-tips {
                grid-template-columns: 1fr;
            }
        }
    </style>
</body>
</html>